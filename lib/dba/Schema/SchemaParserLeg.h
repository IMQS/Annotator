// clang-format off
/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 42
#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      size_t offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_COMMENT(yycontext *yy); /* 42 */
YY_RULE(int) yy_WS_CHAR(yycontext *yy); /* 41 */
YY_RULE(int) yy_EOL(yycontext *yy); /* 40 */
YY_RULE(int) yy_XDATAVALUE(yycontext *yy); /* 39 */
YY_RULE(int) yy_RELATION_XDATA(yycontext *yy); /* 38 */
YY_RULE(int) yy_RELATION_HAS_X(yycontext *yy); /* 37 */
YY_RULE(int) yy_WORD(yycontext *yy); /* 36 */
YY_RULE(int) yy_FIELD_XDATA(yycontext *yy); /* 35 */
YY_RULE(int) yy_FIELD_WIDTH(yycontext *yy); /* 34 */
YY_RULE(int) yy_FIELD_TYPE(yycontext *yy); /* 33 */
YY_RULE(int) yy_FIELD_REQ(yycontext *yy); /* 32 */
YY_RULE(int) yy_CLOSEP(yycontext *yy); /* 31 */
YY_RULE(int) yy_IDFIELD(yycontext *yy); /* 30 */
YY_RULE(int) yy_OPENP(yycontext *yy); /* 29 */
YY_RULE(int) yy_COLON(yycontext *yy); /* 28 */
YY_RULE(int) yy_IDSUFFIX_WS(yycontext *yy); /* 27 */
YY_RULE(int) yy_COMMENT_OR_EOL(yycontext *yy); /* 26 */
YY_RULE(int) yy_COMMA(yycontext *yy); /* 25 */
YY_RULE(int) yy_IDTAB_WS(yycontext *yy); /* 24 */
YY_RULE(int) yy_INDEX(yycontext *yy); /* 23 */
YY_RULE(int) yy_PKEY(yycontext *yy); /* 22 */
YY_RULE(int) yy_CLOSEC(yycontext *yy); /* 21 */
YY_RULE(int) yy_TABLEFLAGS(yycontext *yy); /* 20 */
YY_RULE(int) yy_HASONE(yycontext *yy); /* 19 */
YY_RULE(int) yy_HASMANY(yycontext *yy); /* 18 */
YY_RULE(int) yy_NETNODE(yycontext *yy); /* 17 */
YY_RULE(int) yy_NETLINK(yycontext *yy); /* 16 */
YY_RULE(int) yy_FIELD(yycontext *yy); /* 15 */
YY_RULE(int) yy_GROUP(yycontext *yy); /* 14 */
YY_RULE(int) yy_OPENC(yycontext *yy); /* 13 */
YY_RULE(int) yy_INHERIT(yycontext *yy); /* 12 */
YY_RULE(int) yy_QUOTED(yycontext *yy); /* 11 */
YY_RULE(int) yy_SEMICOLON(yycontext *yy); /* 10 */
YY_RULE(int) yy_IDTAB(yycontext *yy); /* 9 */
YY_RULE(int) yy_INT(yycontext *yy); /* 8 */
YY_RULE(int) yy__(yycontext *yy); /* 7 */
YY_RULE(int) yy_SUFFIXTABLES(yycontext *yy); /* 6 */
YY_RULE(int) yy_TABLE(yycontext *yy); /* 5 */
YY_RULE(int) yy_TABLESPACE(yycontext *yy); /* 4 */
YY_RULE(int) yy_VERSION(yycontext *yy); /* 3 */
YY_RULE(int) yy_WS(yycontext *yy); /* 2 */
YY_RULE(int) yy_ROOT(yycontext *yy); /* 1 */

YY_ACTION(void) yy_2_RELATION_XDATA(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_RELATION_XDATA\n"));
  {
   relation_xdata_value(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_RELATION_XDATA(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_RELATION_XDATA\n"));
  {
   relation_xdata_key(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_FIELD_XDATA(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_FIELD_XDATA\n"));
  {
   field_xdata_value(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_FIELD_XDATA(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FIELD_XDATA\n"));
  {
   field_xdata_key(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_TABLEFLAGS(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_TABLEFLAGS\n"));
  {
   table_flags(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TABLEFLAGS(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TABLEFLAGS\n"));
  {
   table_flags(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_RELATION_HAS_X(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_RELATION_HAS_X\n"));
  {
   relation_foreign_field(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_RELATION_HAS_X(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_RELATION_HAS_X\n"));
  {
   relation_local_field(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_HASONE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_HASONE\n"));
  {
   begin_hasone(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_HASMANY(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_HASMANY\n"));
  {
   begin_hasmany(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_NETNODE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_NETNODE\n"));
  {
   WRITEX(yy->cTable->NetworkNode); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_NETNODE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_NETNODE\n"));
  {
   WRITEX(yy->cTable->Network); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_NETLINK(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_NETLINK\n"));
  {
   WRITEX(yy->cTable->NetworkLinkB); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_NETLINK(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_NETLINK\n"));
  {
   WRITEX(yy->cTable->NetworkLinkA); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_NETLINK(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_NETLINK\n"));
  {
   if (yy->cTable->Network != "" ) SetError(yy, tsf::fmt("Only one network per table '%s'", yy->cTable->GetName()));
									  else						      WRITEX(yy->cTable->Network); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_GROUP(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_GROUP\n"));
  {
   begin_group(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_6_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_6_FIELD\n"));
  {
   WRITEX(yy->cField->FriendlyName); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_5_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_5_FIELD\n"));
  {
   WRITEX(yy->cField->Name); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_FIELD\n"));
  {
   yy->cField->Width = atoi(yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_FIELD\n"));
  {
   parse_type(yy, yytext, yy->cField); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_FIELD\n"));
  {
   if (strcmp(yytext,"required") == 0) yy->cField->Flags |= TypeFlags::NotNull; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_FIELD(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FIELD\n"));
  {
   begin_field(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_6_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_6_INDEX\n"));
  {
   done_index(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_5_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_5_INDEX\n"));
  {
   add_to_index(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_INDEX\n"));
  {
   add_to_index(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_INDEX\n"));
  {
   yy->cIndex->Name = yytext; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_INDEX\n"));
  {
   begin_index(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_INDEX(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_INDEX\n"));
  {
   begin_index(yy); yy->cIndex->IsUnique = true; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_PKEY(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_PKEY\n"));
  {
   done_pk(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_PKEY(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_PKEY\n"));
  {
   add_to_index(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_PKEY(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_PKEY\n"));
  {
   add_to_index(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_PKEY(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_PKEY\n"));
  {
   begin_index(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_INHERIT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_INHERIT\n"));
  {
   WRITEX(yy->cTable->InheritedFrom); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_5_SUFFIXTABLES(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_5_SUFFIXTABLES\n"));
  {
   add_suffix_table_clone(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_SUFFIXTABLES(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_SUFFIXTABLES\n"));
  {
   add_suffix_table_clone(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_SUFFIXTABLES(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_SUFFIXTABLES\n"));
  {
   add_suffix_table_original(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_SUFFIXTABLES(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_SUFFIXTABLES\n"));
  {
   add_suffix_table_original(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_SUFFIXTABLES(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_SUFFIXTABLES\n"));
  {
   suffix_table_start(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_TABLE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_TABLE\n"));
  {
   table_name(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_TABLE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_TABLE\n"));
  {
   WRITEX(yy->cTable->FriendlyName); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TABLE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TABLE\n"));
  {
   begin_table(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_TABLESPACE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_TABLESPACE\n"));
  {
   tablespace_name(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TABLESPACE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TABLESPACE\n"));
  {
   begin_tablespace(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_VERSION(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_VERSION\n"));
  {
   version(yy, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_ROOT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_ROOT\n"));
  {
   success(yy); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}

YY_RULE(int) yy_COMMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COMMENT"));  if (!yymatchChar(yy, '#')) goto l1;
  l2:;	
  {  int yypos3= yy->__pos, yythunkpos3= yy->__thunkpos;
  {  int yypos4= yy->__pos, yythunkpos4= yy->__thunkpos;  if (!yy_EOL(yy)) goto l4;  goto l3;
  l4:;	  yy->__pos= yypos4; yy->__thunkpos= yythunkpos4;
  }  if (!yymatchDot(yy)) goto l3;  goto l2;
  l3:;	  yy->__pos= yypos3; yy->__thunkpos= yythunkpos3;
  }  if (!yy_EOL(yy)) goto l1;
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMENT", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WS_CHAR(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WS_CHAR"));
  {  int yypos6= yy->__pos, yythunkpos6= yy->__thunkpos;  if (!yymatchChar(yy, ' ')) goto l7;  goto l6;
  l7:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;  if (!yymatchChar(yy, '\t')) goto l8;  goto l6;
  l8:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;  if (!yymatchChar(yy, '\n')) goto l9;  goto l6;
  l9:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;  if (!yymatchString(yy, "\r\n")) goto l10;  goto l6;
  l10:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;  if (!yymatchChar(yy, '\r')) goto l5;
  }
  l6:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "WS_CHAR", yy->__buf+yy->__pos));
  return 1;
  l5:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WS_CHAR", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));
  {  int yypos12= yy->__pos, yythunkpos12= yy->__thunkpos;  if (!yymatchChar(yy, '\n')) goto l13;  goto l12;
  l13:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;  if (!yymatchString(yy, "\r\n")) goto l14;  goto l12;
  l14:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;  if (!yymatchChar(yy, '\r')) goto l11;
  }
  l12:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l11:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_XDATAVALUE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "XDATAVALUE"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l15;
#undef yytext
#undef yyleng
  }
  {  int yypos18= yy->__pos, yythunkpos18= yy->__thunkpos;  if (!yy_WS_CHAR(yy)) goto l18;  goto l15;
  l18:;	  yy->__pos= yypos18; yy->__thunkpos= yythunkpos18;
  }  if (!yymatchDot(yy)) goto l15;
  l16:;	
  {  int yypos17= yy->__pos, yythunkpos17= yy->__thunkpos;
  {  int yypos19= yy->__pos, yythunkpos19= yy->__thunkpos;  if (!yy_WS_CHAR(yy)) goto l19;  goto l17;
  l19:;	  yy->__pos= yypos19; yy->__thunkpos= yythunkpos19;
  }  if (!yymatchDot(yy)) goto l17;  goto l16;
  l17:;	  yy->__pos= yypos17; yy->__thunkpos= yythunkpos17;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l15;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l15;
  yyprintf((stderr, "  ok   %s @ %s\n", "XDATAVALUE", yy->__buf+yy->__pos));
  return 1;
  l15:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "XDATAVALUE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RELATION_XDATA(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RELATION_XDATA"));  if (!yy_IDTAB(yy)) goto l20;  yyDo(yy, yy_1_RELATION_XDATA, yy->__begin, yy->__end);  if (!yymatchChar(yy, ':')) goto l20;  if (!yy_XDATAVALUE(yy)) goto l20;  yyDo(yy, yy_2_RELATION_XDATA, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "RELATION_XDATA", yy->__buf+yy->__pos));
  return 1;
  l20:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RELATION_XDATA", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RELATION_HAS_X(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RELATION_HAS_X"));  if (!yy_IDFIELD(yy)) goto l21;  yyDo(yy, yy_1_RELATION_HAS_X, yy->__begin, yy->__end);  if (!yy_IDTAB(yy)) goto l21;  yyDo(yy, yy_2_RELATION_HAS_X, yy->__begin, yy->__end);
  l22:;	
  {  int yypos23= yy->__pos, yythunkpos23= yy->__thunkpos;  if (!yy_RELATION_XDATA(yy)) goto l23;  goto l22;
  l23:;	  yy->__pos= yypos23; yy->__thunkpos= yythunkpos23;
  }  if (!yy_COMMENT_OR_EOL(yy)) goto l21;
  yyprintf((stderr, "  ok   %s @ %s\n", "RELATION_HAS_X", yy->__buf+yy->__pos));
  return 1;
  l21:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RELATION_HAS_X", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WORD(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WORD"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l24;
#undef yytext
#undef yyleng
  }
  {  int yypos27= yy->__pos, yythunkpos27= yy->__thunkpos;  if (!yy_WS_CHAR(yy)) goto l27;  goto l24;
  l27:;	  yy->__pos= yypos27; yy->__thunkpos= yythunkpos27;
  }  if (!yymatchDot(yy)) goto l24;
  l25:;	
  {  int yypos26= yy->__pos, yythunkpos26= yy->__thunkpos;
  {  int yypos28= yy->__pos, yythunkpos28= yy->__thunkpos;  if (!yy_WS_CHAR(yy)) goto l28;  goto l26;
  l28:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;
  }  if (!yymatchDot(yy)) goto l26;  goto l25;
  l26:;	  yy->__pos= yypos26; yy->__thunkpos= yythunkpos26;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l24;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l24;
  yyprintf((stderr, "  ok   %s @ %s\n", "WORD", yy->__buf+yy->__pos));
  return 1;
  l24:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WORD", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FIELD_XDATA(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FIELD_XDATA"));  if (!yy_IDTAB(yy)) goto l29;  yyDo(yy, yy_1_FIELD_XDATA, yy->__begin, yy->__end);  if (!yymatchChar(yy, ':')) goto l29;  if (!yy_XDATAVALUE(yy)) goto l29;  yyDo(yy, yy_2_FIELD_XDATA, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FIELD_XDATA", yy->__buf+yy->__pos));
  return 1;
  l29:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FIELD_XDATA", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FIELD_WIDTH(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FIELD_WIDTH"));  if (!yy_OPENP(yy)) goto l30;  if (!yy__(yy)) goto l30;  if (!yy_INT(yy)) goto l30;  if (!yy__(yy)) goto l30;  if (!yy_CLOSEP(yy)) goto l30;  if (!yy__(yy)) goto l30;
  yyprintf((stderr, "  ok   %s @ %s\n", "FIELD_WIDTH", yy->__buf+yy->__pos));
  return 1;
  l30:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FIELD_WIDTH", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FIELD_TYPE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FIELD_TYPE"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l31;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\000\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l31;
  l32:;	
  {  int yypos33= yy->__pos, yythunkpos33= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l33;  goto l32;
  l33:;	  yy->__pos= yypos33; yy->__thunkpos= yythunkpos33;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l31;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l31;
  yyprintf((stderr, "  ok   %s @ %s\n", "FIELD_TYPE", yy->__buf+yy->__pos));
  return 1;
  l31:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FIELD_TYPE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FIELD_REQ(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FIELD_REQ"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l34;
#undef yytext
#undef yyleng
  }
  {  int yypos35= yy->__pos, yythunkpos35= yy->__thunkpos;  if (!yymatchString(yy, "optional")) goto l36;  goto l35;
  l36:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yymatchString(yy, "required")) goto l34;
  }
  l35:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l34;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l34;
  yyprintf((stderr, "  ok   %s @ %s\n", "FIELD_REQ", yy->__buf+yy->__pos));
  return 1;
  l34:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FIELD_REQ", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSEP(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSEP"));  if (!yymatchChar(yy, ')')) goto l37;  if (!yy_WS(yy)) goto l37;
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSEP", yy->__buf+yy->__pos));
  return 1;
  l37:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSEP", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IDFIELD(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IDFIELD"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l38;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l38;
  l39:;	
  {  int yypos40= yy->__pos, yythunkpos40= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\100\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l40;  goto l39;
  l40:;	  yy->__pos= yypos40; yy->__thunkpos= yythunkpos40;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l38;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l38;
  yyprintf((stderr, "  ok   %s @ %s\n", "IDFIELD", yy->__buf+yy->__pos));
  return 1;
  l38:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IDFIELD", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPENP(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPENP"));  if (!yymatchChar(yy, '(')) goto l41;  if (!yy_WS(yy)) goto l41;
  yyprintf((stderr, "  ok   %s @ %s\n", "OPENP", yy->__buf+yy->__pos));
  return 1;
  l41:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPENP", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COLON(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COLON"));  if (!yymatchChar(yy, ':')) goto l42;  if (!yy__(yy)) goto l42;
  yyprintf((stderr, "  ok   %s @ %s\n", "COLON", yy->__buf+yy->__pos));
  return 1;
  l42:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COLON", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IDSUFFIX_WS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IDSUFFIX_WS"));  if (!yy_WS(yy)) goto l43;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l43;
#undef yytext
#undef yyleng
  }
  l44:;	
  {  int yypos45= yy->__pos, yythunkpos45= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\100\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l45;  goto l44;
  l45:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l43;
#undef yytext
#undef yyleng
  }  if (!yy_WS(yy)) goto l43;
  yyprintf((stderr, "  ok   %s @ %s\n", "IDSUFFIX_WS", yy->__buf+yy->__pos));
  return 1;
  l43:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IDSUFFIX_WS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COMMENT_OR_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COMMENT_OR_EOL"));
  {  int yypos47= yy->__pos, yythunkpos47= yy->__thunkpos;  if (!yy_COMMENT(yy)) goto l48;  goto l47;
  l48:;	  yy->__pos= yypos47; yy->__thunkpos= yythunkpos47;  if (!yy_EOL(yy)) goto l46;
  }
  l47:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMENT_OR_EOL", yy->__buf+yy->__pos));
  return 1;
  l46:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMENT_OR_EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COMMA(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COMMA"));  if (!yymatchChar(yy, ',')) goto l49;  if (!yy__(yy)) goto l49;
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMA", yy->__buf+yy->__pos));
  return 1;
  l49:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMA", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IDTAB_WS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IDTAB_WS"));  if (!yy_WS(yy)) goto l50;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l50;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l50;
  l51:;	
  {  int yypos52= yy->__pos, yythunkpos52= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\100\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l52;  goto l51;
  l52:;	  yy->__pos= yypos52; yy->__thunkpos= yythunkpos52;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l50;
#undef yytext
#undef yyleng
  }  if (!yy_WS(yy)) goto l50;
  yyprintf((stderr, "  ok   %s @ %s\n", "IDTAB_WS", yy->__buf+yy->__pos));
  return 1;
  l50:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IDTAB_WS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_INDEX(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "INDEX"));  if (!yy__(yy)) goto l53;
  {  int yypos54= yy->__pos, yythunkpos54= yy->__thunkpos;  if (!yymatchString(yy, "UNIQUE")) goto l55;  if (!yy__(yy)) goto l55;  if (!yymatchString(yy, "INDEX")) goto l55;  yyDo(yy, yy_1_INDEX, yy->__begin, yy->__end);  goto l54;
  l55:;	  yy->__pos= yypos54; yy->__thunkpos= yythunkpos54;  if (!yymatchString(yy, "INDEX")) goto l53;  yyDo(yy, yy_2_INDEX, yy->__begin, yy->__end);
  }
  l54:;	  if (!yy__(yy)) goto l53;
  {  int yypos56= yy->__pos, yythunkpos56= yy->__thunkpos;  if (!yy_IDTAB(yy)) goto l57;  if (!yy_OPENP(yy)) goto l57;  yyDo(yy, yy_3_INDEX, yy->__begin, yy->__end);  goto l56;
  l57:;	  yy->__pos= yypos56; yy->__thunkpos= yythunkpos56;  if (!yy_OPENP(yy)) goto l53;
  }
  l56:;	
  l58:;	
  {  int yypos59= yy->__pos, yythunkpos59= yy->__thunkpos;  if (!yy_IDFIELD(yy)) goto l59;  yyDo(yy, yy_4_INDEX, yy->__begin, yy->__end);  if (!yy_COMMA(yy)) goto l59;  goto l58;
  l59:;	  yy->__pos= yypos59; yy->__thunkpos= yythunkpos59;
  }  if (!yy_IDFIELD(yy)) goto l53;  yyDo(yy, yy_5_INDEX, yy->__begin, yy->__end);  if (!yy_CLOSEP(yy)) goto l53;  yyDo(yy, yy_6_INDEX, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INDEX", yy->__buf+yy->__pos));
  return 1;
  l53:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INDEX", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_PKEY(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "PKEY"));  if (!yymatchString(yy, "PRIMARY")) goto l60;  if (!yy__(yy)) goto l60;  if (!yymatchString(yy, "KEY")) goto l60;  if (!yy__(yy)) goto l60;  if (!yy_OPENP(yy)) goto l60;  if (!yy__(yy)) goto l60;  yyDo(yy, yy_1_PKEY, yy->__begin, yy->__end);
  l61:;	
  {  int yypos62= yy->__pos, yythunkpos62= yy->__thunkpos;  if (!yy_IDFIELD(yy)) goto l62;  yyDo(yy, yy_2_PKEY, yy->__begin, yy->__end);  if (!yy_COMMA(yy)) goto l62;  goto l61;
  l62:;	  yy->__pos= yypos62; yy->__thunkpos= yythunkpos62;
  }  if (!yy_IDFIELD(yy)) goto l60;  yyDo(yy, yy_3_PKEY, yy->__begin, yy->__end);  if (!yy_CLOSEP(yy)) goto l60;  yyDo(yy, yy_4_PKEY, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "PKEY", yy->__buf+yy->__pos));
  return 1;
  l60:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PKEY", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSEC(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSEC"));  if (!yy__(yy)) goto l63;  if (!yymatchChar(yy, '}')) goto l63;  if (!yy_WS(yy)) goto l63;
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSEC", yy->__buf+yy->__pos));
  return 1;
  l63:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSEC", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TABLEFLAGS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TABLEFLAGS"));  if (!yy__(yy)) goto l64;  if (!yymatchString(yy, "flags")) goto l64;  if (!yy__(yy)) goto l64;
  l65:;	
  {  int yypos66= yy->__pos, yythunkpos66= yy->__thunkpos;  if (!yy_IDFIELD(yy)) goto l66;  yyDo(yy, yy_1_TABLEFLAGS, yy->__begin, yy->__end);  if (!yy_COMMA(yy)) goto l66;  goto l65;
  l66:;	  yy->__pos= yypos66; yy->__thunkpos= yythunkpos66;
  }  if (!yy_IDFIELD(yy)) goto l64;  yyDo(yy, yy_2_TABLEFLAGS, yy->__begin, yy->__end);  if (!yy_COMMENT_OR_EOL(yy)) goto l64;
  yyprintf((stderr, "  ok   %s @ %s\n", "TABLEFLAGS", yy->__buf+yy->__pos));
  return 1;
  l64:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TABLEFLAGS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_HASONE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "HASONE"));  if (!yy__(yy)) goto l67;  if (!yymatchString(yy, "hasone")) goto l67;  if (!yy__(yy)) goto l67;  if (!yy_WORD(yy)) goto l67;  yyDo(yy, yy_1_HASONE, yy->__begin, yy->__end);  if (!yy_RELATION_HAS_X(yy)) goto l67;
  yyprintf((stderr, "  ok   %s @ %s\n", "HASONE", yy->__buf+yy->__pos));
  return 1;
  l67:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HASONE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_HASMANY(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "HASMANY"));  if (!yy__(yy)) goto l68;  if (!yymatchString(yy, "hasmany")) goto l68;  if (!yy__(yy)) goto l68;  if (!yy_WORD(yy)) goto l68;  yyDo(yy, yy_1_HASMANY, yy->__begin, yy->__end);  if (!yy_RELATION_HAS_X(yy)) goto l68;
  yyprintf((stderr, "  ok   %s @ %s\n", "HASMANY", yy->__buf+yy->__pos));
  return 1;
  l68:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HASMANY", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_NETNODE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "NETNODE"));  if (!yy__(yy)) goto l69;  if (!yymatchString(yy, "netnode")) goto l69;  if (!yy__(yy)) goto l69;  if (!yy_QUOTED(yy)) goto l69;  yyDo(yy, yy_1_NETNODE, yy->__begin, yy->__end);  if (!yy_IDFIELD(yy)) goto l69;  yyDo(yy, yy_2_NETNODE, yy->__begin, yy->__end);  if (!yy_COMMENT_OR_EOL(yy)) goto l69;
  yyprintf((stderr, "  ok   %s @ %s\n", "NETNODE", yy->__buf+yy->__pos));
  return 1;
  l69:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NETNODE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_NETLINK(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "NETLINK"));  if (!yy__(yy)) goto l70;  if (!yymatchString(yy, "netlink")) goto l70;  if (!yy__(yy)) goto l70;  if (!yy_QUOTED(yy)) goto l70;  yyDo(yy, yy_1_NETLINK, yy->__begin, yy->__end);  if (!yy_IDFIELD(yy)) goto l70;  yyDo(yy, yy_2_NETLINK, yy->__begin, yy->__end);  if (!yy_IDFIELD(yy)) goto l70;  yyDo(yy, yy_3_NETLINK, yy->__begin, yy->__end);  if (!yy_COMMENT_OR_EOL(yy)) goto l70;
  yyprintf((stderr, "  ok   %s @ %s\n", "NETLINK", yy->__buf+yy->__pos));
  return 1;
  l70:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NETLINK", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FIELD(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FIELD"));  if (!yy__(yy)) goto l71;  yyDo(yy, yy_1_FIELD, yy->__begin, yy->__end);  if (!yy_FIELD_REQ(yy)) goto l71;  yyDo(yy, yy_2_FIELD, yy->__begin, yy->__end);  if (!yy_FIELD_TYPE(yy)) goto l71;  yyDo(yy, yy_3_FIELD, yy->__begin, yy->__end);
  {  int yypos72= yy->__pos, yythunkpos72= yy->__thunkpos;  if (!yy_FIELD_WIDTH(yy)) goto l72;  goto l73;
  l72:;	  yy->__pos= yypos72; yy->__thunkpos= yythunkpos72;
  }
  l73:;	  yyDo(yy, yy_4_FIELD, yy->__begin, yy->__end);  if (!yy_IDFIELD(yy)) goto l71;  yyDo(yy, yy_5_FIELD, yy->__begin, yy->__end);  if (!yy_QUOTED(yy)) goto l71;  yyDo(yy, yy_6_FIELD, yy->__begin, yy->__end);
  l74:;	
  {  int yypos75= yy->__pos, yythunkpos75= yy->__thunkpos;  if (!yy_FIELD_XDATA(yy)) goto l75;  goto l74;
  l75:;	  yy->__pos= yypos75; yy->__thunkpos= yythunkpos75;
  }  if (!yy_COMMENT_OR_EOL(yy)) goto l71;
  yyprintf((stderr, "  ok   %s @ %s\n", "FIELD", yy->__buf+yy->__pos));
  return 1;
  l71:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FIELD", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_GROUP(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "GROUP"));  if (!yy__(yy)) goto l76;  if (!yy_QUOTED(yy)) goto l76;  yyDo(yy, yy_1_GROUP, yy->__begin, yy->__end);  if (!yy_COMMENT_OR_EOL(yy)) goto l76;
  yyprintf((stderr, "  ok   %s @ %s\n", "GROUP", yy->__buf+yy->__pos));
  return 1;
  l76:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "GROUP", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPENC(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPENC"));  if (!yy__(yy)) goto l77;  if (!yymatchChar(yy, '{')) goto l77;  if (!yy_WS(yy)) goto l77;
  yyprintf((stderr, "  ok   %s @ %s\n", "OPENC", yy->__buf+yy->__pos));
  return 1;
  l77:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPENC", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_INHERIT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "INHERIT"));  if (!yy_COLON(yy)) goto l78;  if (!yy_IDTAB(yy)) goto l78;  yyDo(yy, yy_1_INHERIT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INHERIT", yy->__buf+yy->__pos));
  return 1;
  l78:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INHERIT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_QUOTED(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "QUOTED"));  if (!yymatchChar(yy, '"')) goto l79;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l79;
#undef yytext
#undef yyleng
  }
  l80:;	
  {  int yypos81= yy->__pos, yythunkpos81= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\377\377\377\377\373\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l81;  goto l80;
  l81:;	  yy->__pos= yypos81; yy->__thunkpos= yythunkpos81;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l79;
#undef yytext
#undef yyleng
  }  if (!yymatchChar(yy, '"')) goto l79;  if (!yy__(yy)) goto l79;
  yyprintf((stderr, "  ok   %s @ %s\n", "QUOTED", yy->__buf+yy->__pos));
  return 1;
  l79:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "QUOTED", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SEMICOLON(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "SEMICOLON"));  if (!yymatchChar(yy, ';')) goto l82;  if (!yy__(yy)) goto l82;
  yyprintf((stderr, "  ok   %s @ %s\n", "SEMICOLON", yy->__buf+yy->__pos));
  return 1;
  l82:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SEMICOLON", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IDTAB(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IDTAB"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l83;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l83;
  l84:;	
  {  int yypos85= yy->__pos, yythunkpos85= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\100\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l85;  goto l84;
  l85:;	  yy->__pos= yypos85; yy->__thunkpos= yythunkpos85;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l83;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l83;
  yyprintf((stderr, "  ok   %s @ %s\n", "IDTAB", yy->__buf+yy->__pos));
  return 1;
  l83:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IDTAB", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_INT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "INT"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l86;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l86;
  l87:;	
  {  int yypos88= yy->__pos, yythunkpos88= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l88;  goto l87;
  l88:;	  yy->__pos= yypos88; yy->__thunkpos= yythunkpos88;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l86;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l86;
  yyprintf((stderr, "  ok   %s @ %s\n", "INT", yy->__buf+yy->__pos));
  return 1;
  l86:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy__(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "_"));
  l90:;	
  {  int yypos91= yy->__pos, yythunkpos91= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l91;  goto l90;
  l91:;	  yy->__pos= yypos91; yy->__thunkpos= yythunkpos91;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_SUFFIXTABLES(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "SUFFIXTABLES"));  if (!yymatchString(yy, "CREATE")) goto l92;  if (!yy__(yy)) goto l92;  if (!yymatchString(yy, "SUFFIX")) goto l92;  if (!yy__(yy)) goto l92;  if (!yymatchString(yy, "TABLES")) goto l92;  if (!yy_WS(yy)) goto l92;  yyDo(yy, yy_1_SUFFIXTABLES, yy->__begin, yy->__end);  if (!yy_OPENC(yy)) goto l92;
  l93:;	
  {  int yypos94= yy->__pos, yythunkpos94= yy->__thunkpos;  if (!yy_IDTAB_WS(yy)) goto l94;  yyDo(yy, yy_2_SUFFIXTABLES, yy->__begin, yy->__end);  if (!yy_COMMA(yy)) goto l94;  goto l93;
  l94:;	  yy->__pos= yypos94; yy->__thunkpos= yythunkpos94;
  }  if (!yy_IDTAB_WS(yy)) goto l92;  yyDo(yy, yy_3_SUFFIXTABLES, yy->__begin, yy->__end);  if (!yy_SEMICOLON(yy)) goto l92;  if (!yy_WS(yy)) goto l92;
  l95:;	
  {  int yypos96= yy->__pos, yythunkpos96= yy->__thunkpos;  if (!yy_COMMENT_OR_EOL(yy)) goto l96;  goto l95;
  l96:;	  yy->__pos= yypos96; yy->__thunkpos= yythunkpos96;
  }
  l97:;	
  {  int yypos98= yy->__pos, yythunkpos98= yy->__thunkpos;  if (!yy_IDSUFFIX_WS(yy)) goto l98;  yyDo(yy, yy_4_SUFFIXTABLES, yy->__begin, yy->__end);  if (!yy_COMMA(yy)) goto l98;  goto l97;
  l98:;	  yy->__pos= yypos98; yy->__thunkpos= yythunkpos98;
  }  if (!yy_IDSUFFIX_WS(yy)) goto l92;  yyDo(yy, yy_5_SUFFIXTABLES, yy->__begin, yy->__end);  if (!yy_SEMICOLON(yy)) goto l92;  if (!yy_WS(yy)) goto l92;
  l99:;	
  {  int yypos100= yy->__pos, yythunkpos100= yy->__thunkpos;  if (!yy_COMMENT_OR_EOL(yy)) goto l100;  goto l99;
  l100:;	  yy->__pos= yypos100; yy->__thunkpos= yythunkpos100;
  }  if (!yy_CLOSEC(yy)) goto l92;  if (!yy_SEMICOLON(yy)) goto l92;  if (!yy_WS(yy)) goto l92;
  yyprintf((stderr, "  ok   %s @ %s\n", "SUFFIXTABLES", yy->__buf+yy->__pos));
  return 1;
  l92:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SUFFIXTABLES", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TABLE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TABLE"));  if (!yymatchString(yy, "CREATE")) goto l101;  if (!yy__(yy)) goto l101;  if (!yymatchString(yy, "TABLE")) goto l101;  if (!yy__(yy)) goto l101;  yyDo(yy, yy_1_TABLE, yy->__begin, yy->__end);  if (!yy_QUOTED(yy)) goto l101;  yyDo(yy, yy_2_TABLE, yy->__begin, yy->__end);  if (!yy_IDTAB(yy)) goto l101;  yyDo(yy, yy_3_TABLE, yy->__begin, yy->__end);
  {  int yypos102= yy->__pos, yythunkpos102= yy->__thunkpos;  if (!yy_INHERIT(yy)) goto l102;  goto l103;
  l102:;	  yy->__pos= yypos102; yy->__thunkpos= yythunkpos102;
  }
  l103:;	  if (!yy_WS(yy)) goto l101;  if (!yy_OPENC(yy)) goto l101;
  l104:;	
  {  int yypos105= yy->__pos, yythunkpos105= yy->__thunkpos;
  {  int yypos106= yy->__pos, yythunkpos106= yy->__thunkpos;  if (!yy_GROUP(yy)) goto l107;  goto l106;
  l107:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_FIELD(yy)) goto l108;  goto l106;
  l108:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_NETLINK(yy)) goto l109;  goto l106;
  l109:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_NETNODE(yy)) goto l110;  goto l106;
  l110:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_HASMANY(yy)) goto l111;  goto l106;
  l111:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_HASONE(yy)) goto l112;  goto l106;
  l112:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;  if (!yy_TABLEFLAGS(yy)) goto l105;
  }
  l106:;	  if (!yy_WS(yy)) goto l105;  goto l104;
  l105:;	  yy->__pos= yypos105; yy->__thunkpos= yythunkpos105;
  }  if (!yy_CLOSEC(yy)) goto l101;
  {  int yypos113= yy->__pos, yythunkpos113= yy->__thunkpos;  if (!yy_PKEY(yy)) goto l113;  goto l114;
  l113:;	  yy->__pos= yypos113; yy->__thunkpos= yythunkpos113;
  }
  l114:;	
  l115:;	
  {  int yypos116= yy->__pos, yythunkpos116= yy->__thunkpos;  if (!yy_INDEX(yy)) goto l116;  goto l115;
  l116:;	  yy->__pos= yypos116; yy->__thunkpos= yythunkpos116;
  }  if (!yy_SEMICOLON(yy)) goto l101;  if (!yy_WS(yy)) goto l101;
  yyprintf((stderr, "  ok   %s @ %s\n", "TABLE", yy->__buf+yy->__pos));
  return 1;
  l101:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TABLE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TABLESPACE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TABLESPACE"));  if (!yymatchString(yy, "CREATE")) goto l117;  if (!yy__(yy)) goto l117;  if (!yymatchString(yy, "SCHEMA")) goto l117;  if (!yy__(yy)) goto l117;  yyDo(yy, yy_1_TABLESPACE, yy->__begin, yy->__end);  if (!yy_IDTAB(yy)) goto l117;  yyDo(yy, yy_2_TABLESPACE, yy->__begin, yy->__end);  if (!yy_SEMICOLON(yy)) goto l117;  if (!yy_WS(yy)) goto l117;
  yyprintf((stderr, "  ok   %s @ %s\n", "TABLESPACE", yy->__buf+yy->__pos));
  return 1;
  l117:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TABLESPACE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_VERSION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "VERSION"));  if (!yymatchString(yy, "VERSION")) goto l118;  if (!yy__(yy)) goto l118;  if (!yy_INT(yy)) goto l118;  yyDo(yy, yy_1_VERSION, yy->__begin, yy->__end);  if (!yy_WS(yy)) goto l118;
  yyprintf((stderr, "  ok   %s @ %s\n", "VERSION", yy->__buf+yy->__pos));
  return 1;
  l118:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VERSION", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WS(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "WS"));
  l120:;	
  {  int yypos121= yy->__pos, yythunkpos121= yy->__thunkpos;
  {  int yypos122= yy->__pos, yythunkpos122= yy->__thunkpos;  if (!yy_WS_CHAR(yy)) goto l123;  goto l122;
  l123:;	  yy->__pos= yypos122; yy->__thunkpos= yythunkpos122;  if (!yy_COMMENT(yy)) goto l121;
  }
  l122:;	  goto l120;
  l121:;	  yy->__pos= yypos121; yy->__thunkpos= yythunkpos121;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "WS", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_ROOT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ROOT"));  yyDo(yy, yy_1_ROOT, yy->__begin, yy->__end);  if (!yy_WS(yy)) goto l124;
  {  int yypos125= yy->__pos, yythunkpos125= yy->__thunkpos;  if (!yy_VERSION(yy)) goto l125;  if (!yy_WS(yy)) goto l125;  goto l126;
  l125:;	  yy->__pos= yypos125; yy->__thunkpos= yythunkpos125;
  }
  l126:;	
  {  int yypos129= yy->__pos, yythunkpos129= yy->__thunkpos;  if (!yy_TABLESPACE(yy)) goto l130;  goto l129;
  l130:;	  yy->__pos= yypos129; yy->__thunkpos= yythunkpos129;  if (!yy_TABLE(yy)) goto l131;  goto l129;
  l131:;	  yy->__pos= yypos129; yy->__thunkpos= yythunkpos129;  if (!yy_SUFFIXTABLES(yy)) goto l124;
  }
  l129:;	
  l127:;	
  {  int yypos128= yy->__pos, yythunkpos128= yy->__thunkpos;
  {  int yypos132= yy->__pos, yythunkpos132= yy->__thunkpos;  if (!yy_TABLESPACE(yy)) goto l133;  goto l132;
  l133:;	  yy->__pos= yypos132; yy->__thunkpos= yythunkpos132;  if (!yy_TABLE(yy)) goto l134;  goto l132;
  l134:;	  yy->__pos= yypos132; yy->__thunkpos= yythunkpos132;  if (!yy_SUFFIXTABLES(yy)) goto l128;
  }
  l132:;	  goto l127;
  l128:;	  yy->__pos= yypos128; yy->__thunkpos= yythunkpos128;
  }
  {  int yypos135= yy->__pos, yythunkpos135= yy->__thunkpos;  if (!yymatchDot(yy)) goto l135;  goto l124;
  l135:;	  yy->__pos= yypos135; yy->__thunkpos= yythunkpos135;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "ROOT", yy->__buf+yy->__pos));
  return 1;
  l124:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ROOT", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_ROOT);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
// clang-format on
