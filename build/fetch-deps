#!/bin/bash

sudo apt-get install -y \
	libcurl4-openssl-dev \
	liblz4-dev \
	zlib1g-dev \
	libjpeg-turbo8-dev

	# libavcodec-dev \
	# libavformat-dev \
	# libswscale-dev

	#libpng-dev \

# Last time I checked (June 4 2018), ffmpeg was not yet buildable on linux from vcpkg.
#
# ffmpeg must be installed from source on ubuntu 16.04, because we need at least version 3.3
# I don't understand why, but I got linker errors when trying to build lib/Video, complaining
# that ffmpeg needed to be built with -fPIC. So then I tried re-running ./configure --enable-pic,
# and then building again, but that didn't help. So eventually I resorted to building the shared
# library only, and that fixed it.
# 
# Install Nvidia npp (comes from the CUDA apt repository)
# sudo apt-get install -y libnppi7.5
#
# Also, since version 4... (see https://superuser.com/questions/1299064/error-cuvid-requested-but-not-all-dependencies-are-satisfied-cuda-ffnvcodec)
# git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
# cd nv-codec-headers
# make
# sudo make install
#
# git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
# cd ffmpeg
# git checkout n3.3.3
# ./configure --enable-pic --disable-static --enable-shared
# ./configure --enable-pic --disable-static --enable-shared --disable-stripping
# ./configure --enable-pic --disable-static --enable-shared --disable-stripping --enable-cuda --enable-cuvid --enable-nvenc --enable-nonfree --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64
# ./configure --enable-pic --disable-static --enable-shared --disable-stripping --enable-cuda --enable-cuvid --enable-nvenc --enable-nonfree --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64
# make
# sudo make install

# [hint - try vcpkg]
# OpenCV must be installed from source, so that you get an up to date version, and the contrib modules
#vcpkg install opencv[contrib,core,eigen,flann,jpeg,opengl,png,tiff]:x64-windows
# OK.. I just compiled OpenCV from source -- instructions here: https://docs.opencv.org/trunk/d7/d9f/tutorial_linux_install.html
# However, you also need to switch to clang.. so:
# export CC=/usr/bin/clang
# export CXX=/usr/bin/clang++
# cmake -D WITH_CUDA=OFF -D OPENCV_EXTRA_MODULES_PATH=/home/ben/dev/opencv_contrib/modules -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D ENABLE_CXX11=ON -D BUILD_LIST=core,features2d,xfeatures2d ..
# with CUDA and optical flow:
# We can't build CUDA support with clang, so leave CC and CXX blank, to compile with GCC
# cmake -D WITH_CUDA=ON -D OPENCV_EXTRA_MODULES_PATH=/home/ben/dev/opencv_contrib/modules -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D ENABLE_CXX11=ON -D BUILD_LIST=calib3d,core,cudaoptflow,cudev,features2d,xfeatures2d ..
# make -j
# sudo make install
